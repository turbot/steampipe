name: Build and Publish DB Image

# Controls when the action will run.
on:
  workflow_dispatch:
    inputs:
      version:
        description: |
          Version number for the OCI image for this release - usually the same as the
          postgres version
        required: true
        default: 14.2.0

      postgres_version:
        description: "Postgres Version to package (eg 14.2.0)"
        required: true
        default: 14.2.0

env:
  PROJECT_ID: steampipe
  IMAGE_NAME: db
  CORE_REPO: us-docker.pkg.dev/steampipe/steampipe
  ORG: turbot
  CONFIG_SCHEMA_VERSION: "2020-11-18"
  VERSION: ${{ github.event.inputs.version }}
  PG_VERSION: ${{ github.event.inputs.postgres_version }}
  PATH_BASE: https://repo1.maven.org/maven2/io/zonky/test/postgres
  NAME_PREFIX: embedded-postgres-binaries
  STEAMPIPE_UPDATE_CHECK: false

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Trim asset version prefix and Validate
        run: |-
          echo $VERSION
          trim=${VERSION#"v"}
          echo $trim
          if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
            echo "Version OK: $trim"
          else
            echo "Invalid version: $trim"
            exit 1
          fi
          echo "VERSION=${trim}" >> $GITHUB_ENV

      - name: Ensure Version Does Not Exist
        run: |-

          URL=https://$(echo $CORE_REPO | sed 's/\//\/v2\//')/$IMAGE_NAME/tags/list
          IDX=$(curl -L $URL | jq ".tags | index(\"$VERSION\")")
          if [ $IDX == "null" ]; then
            echo "OK - Version does not exist: $VERSION"
          else
            echo "Version already exists: $VERSION"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Pull & Extract - darwin amd64
        env:
          OS: darwin
          ARCH: amd64
          TGZ_FILE: postgres-darwin-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR

          curl -L -J https://www.dropbox.com/s/1ga8bv3xjui6q4g/pg_dump?dl=0 --output pg_dump
          curl -L -J https://www.dropbox.com/s/7axroarzqkirvqx/pg_restore?dl=0 --output pg_restore

          mv pg_dump $EXTRACT_DIR/bin/pg_dump
          mv pg_restore $EXTRACT_DIR/bin/pg_restore

          chmod +x $EXTRACT_DIR/bin/pg_dump
          chmod +x $EXTRACT_DIR/bin/pg_restore

      - name: Pull & Extract - darwin arm64
        env:
          OS: darwin
          ARCH: arm64v8
          TGZ_FILE: postgres-darwin-arm_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR

          curl -L -J https://www.dropbox.com/s/tccnneulg18kd57/pg_dump?dl=0 --output pg_dump
          curl -L -J https://www.dropbox.com/s/ya7vy8yzr8a5irs/pg_restore?dl=0 --output pg_restore

          mv pg_dump $EXTRACT_DIR/bin/pg_dump
          mv pg_restore $EXTRACT_DIR/bin/pg_restore

          chmod +x $EXTRACT_DIR/bin/pg_dump
          chmod +x $EXTRACT_DIR/bin/pg_restore

      - name: Pull & Extract - linux amd64
        env:
          OS: linux
          ARCH: amd64
          TGZ_FILE: postgres-linux-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L  -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR

          curl -L -J https://www.dropbox.com/s/3r1vzxiykcc34fu/pg_dump?dl=0 --output pg_dump
          curl -L -J https://www.dropbox.com/s/u49d9s8e562sx1p/pg_restore?dl=0 --output pg_restore
          curl -L -J https://www.dropbox.com/s/6wbrdw7eqg41mba/libpq.so.5.14.migrate?dl=0 --output libpq.so.5.14.migrate

          mv pg_dump $EXTRACT_DIR/bin/pg_dump
          mv pg_restore $EXTRACT_DIR/bin/pg_restore
          mv libpq.so.5.14.migrate $EXTRACT_DIR/lib/libpq.so.5.14.migrate

          chmod +x $EXTRACT_DIR/bin/pg_dump
          chmod +x $EXTRACT_DIR/bin/pg_restore

      - name: Pull & Extract - linux arm64v8
        env:
          OS: linux
          ARCH: arm64v8
          TGZ_FILE: postgres-linux-arm_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L  -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR

          curl -L -J https://www.dropbox.com/s/e0e47d5env54to0/pg_dump?dl=0 --output pg_dump
          curl -L -J https://www.dropbox.com/s/93762dck04wf4uv/pg_restore?dl=0 --output pg_restore
          curl -L -J https://www.dropbox.com/s/smma4tvk1h6bpwc/libpq.so.5.14.migrate?dl=0 --output libpq.so.5.14.migrate

          mv pg_dump $EXTRACT_DIR/bin/pg_dump
          mv pg_restore $EXTRACT_DIR/bin/pg_restore
          mv libpq.so.5.14.migrate $EXTRACT_DIR/lib/libpq.so.5.14.migrate

          chmod +x $EXTRACT_DIR/bin/pg_dump
          chmod +x $EXTRACT_DIR/bin/pg_restore

      - name: Build Config JSON
        run: |-
          JSON_STRING=$( jq -n \
            --arg name "$IMAGE_NAME" \
            --arg organization "$ORG" \
            --arg version "$VERSION" \
            --arg schemaVersion "$CONFIG_SCHEMA_VERSION" \
            --arg dbVersion "$PG_VERSION" \
            '{schemaVersion: $schemaVersion, db: { name: $name, organization: $organization, version: $version, dbVersion: $dbVersion} }' )

          echo $JSON_STRING > config.json

      - name: Build Annotations JSON
        run: |-
          JSON_STRING=$( jq -n \
              --arg title "$IMAGE_NAME" \
              --arg desc "$ORG" \
              --arg version "$VERSION" \
              --arg timestamp "$(date +%FT%T%z)" \
              --arg vendor "Turbot HQ, Inc." \
            '{ 
                "$manifest": { 
                    "org.opencontainers.image.title": $title, 
                    "org.opencontainers.image.description": $desc,
                    "org.opencontainers.image.version": $version, 
                    "org.opencontainers.image.created": $timestamp,
                    "org.opencontainers.image.vendor":  $vendor
                }
            }' )

            echo $JSON_STRING > annotations.json

      - name: Get GCloud CLI
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          service_account_key: ${{ secrets.GCP_GITHUB_ACTION_PUSH_ARTIFACTS }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Setup GCloud CLI
        run: |-
          echo ${{ secrets.STEAMPIPE_REGISTRY_SA_KEY }}
          gcloud config list
          gcloud components install beta
          gcloud components install alpha --quiet
          gcloud beta auth configure-docker us-docker.pkg.dev

      - name: Verify ORAS
        run: |-
          oras version

      - name: Push to Registry
        run: |-
          REF="$CORE_REPO/$IMAGE_NAME:$GITHUB_RUN_ID"

          oras push $REF \
              --manifest-config config.json:application/vnd.turbot.steampipe.config.v1+json \
              --manifest-annotations annotations.json \
              extracted-darwin-amd64-${PG_VERSION}:application/vnd.turbot.steampipe.db.darwin-amd64.layer.v1+tar \
              extracted-darwin-arm64v8-${PG_VERSION}:application/vnd.turbot.steampipe.db.darwin-arm64.layer.v1+tar \
              extracted-linux-amd64-${PG_VERSION}:application/vnd.turbot.steampipe.db.linux-amd64.layer.v1+tar \
              extracted-linux-arm64v8-${PG_VERSION}:application/vnd.turbot.steampipe.db.linux-arm64.layer.v1+tar

      - name: Set version tags
        uses: ./.github/actions/semver-tags
        id: semver
        with:
          image-to-tag: "${{ env.CORE_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_id  }}"
          image-version: ${{ env.VERSION }}
