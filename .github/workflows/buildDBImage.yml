name: Build and Publish DB Image

# Controls when the action will run. 
on:
  workflow_dispatch:
    inputs:
      version:
        description: |
          Version number for the OCI image for this release - usually the same as the
          postgres version
        required: true
        default: 12.1.0

      postgres_version:
        description: 'Postgres Version to package (eg 12.1.0)'
        required: true
        default: 12.1.0-1

env:
  PROJECT_ID: steampipe
  IMAGE_NAME: db
  CORE_REPO: us-docker.pkg.dev/steampipe/steampipe
  ORG: turbot
  CONFIG_SCHEMA_VERSION: "2020-11-18"
  VERSION:  ${{ github.event.inputs.version }}
  PG_VERSION: ${{ github.event.inputs.postgres_version }}
  PATH_BASE: https://repo1.maven.org/maven2/io/zonky/test/postgres
  NAME_PREFIX: embedded-postgres-binaries
  STEAMPIPE_UPDATE_CHECK: false

jobs:
  goreleaser:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Hook private repo
        run: git config --global url."https://${{ secrets.GH_ACCESS_TOKEN }}:x-oauth-basic@github.com".insteadOf "https://github.com"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Move build artifacts
        run: |
          mkdir ~/artifacts
          mv $GITHUB_WORKSPACE/dist/steampipe_linux_amd64.zip ~/artifacts/linux.zip
          mv $GITHUB_WORKSPACE/dist/steampipe_darwin_amd64.zip ~/artifacts/darwin.zip

      - name: List Build Artifacts
        run: ls -l ~/artifacts

      - name: Save Linux Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-linux
          path: ~/artifacts/linux.zip
          if-no-files-found: error

      - name: Save MacOS Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-darwin
          path: ~/artifacts/darwin.zip
          if-no-files-found: error

  db_platform_test:
    name: DB platform testing
    needs: goreleaser
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.platform }}
    env:
      GOFLAGS: "-mod=vendor"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare for downloads
        id: prepare-for-downloads
        run: |
          mkdir ~/artifacts

      - name: Download Linux Build Artifacts
        uses: actions/download-artifact@v2
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        with:
          name: build-artifact-linux
          path: ~/artifacts

      - name: Download Darwin Build Artifacts
        uses: actions/download-artifact@v2
        if: ${{ matrix.platform == 'macos-latest' }}
        with:
          name: build-artifact-darwin
          path: ~/artifacts

      - name: Check that everything got downloaded
        run: |
          ls -l ~/artifacts

      - name: Rename build artifact on Darwin
        if: ${{ matrix.platform == 'macos-latest' }}
        run: mv ~/artifacts/darwin.zip ~/artifacts/build.zip

      - name: Rename build artifact on Linux
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: mv ~/artifacts/linux.zip ~/artifacts/build.zip

      - name: Check that renaming is good
        run: |
          ls -l ~/artifacts

      - name: Extract Artifacts and Install Binary
        if: ${{ matrix.platform == 'macos-latest' || matrix.platform == 'ubuntu-latest' }}
        run: |
          mkdir ~/build
          unzip ~/artifacts/build.zip -d ~/build
          ls -l ~/build
          echo "PATH=$PATH:$HOME/build" >> $GITHUB_ENV

      - name: Pull & Extract DB - darwin amd64
        if: ${{ matrix.platform == 'macos-latest' }}
        env:
          OS: darwin
          ARCH: amd64
          TGZ_FILE: postgres-darwin-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR
          mkdir -p ~/.steampipe/db/12.1.0/postgres
          mkdir -p ~/.steampipe/db/12.1.0/data
          cp -a $EXTRACT_DIR/. ~/.steampipe/db/12.1.0/postgres
          ~/.steampipe/db/12.1.0/postgres/bin/initdb --auth=trust --username=root --encoding=UTF-8 --wal-segsize=1 -D ~/.steampipe/db/12.1.0/data/
          ps aux | grep postgres
          sleep 5
          steampipe service stop
          steampipe service start
          steampipe query "select 1 as col"

      - name: Pull & Extract DB - linux amd64
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        env:
          OS: linux
          ARCH: amd64
          TGZ_FILE: postgres-linux-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR
          mkdir -p ~/.steampipe/db/12.1.0/postgres
          mkdir -p ~/.steampipe/db/12.1.0/data
          cp -a $EXTRACT_DIR/. ~/.steampipe/db/12.1.0/postgres
          ~/.steampipe/db/12.1.0/postgres/bin/initdb --auth=trust --username=root --encoding=UTF-8 --wal-segsize=1 -D ~/.steampipe/db/12.1.0/data/
          ps aux | grep postgres
          sleep 5
          steampipe service stop
          steampipe service start
          steampipe query "select 1 as col"

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: db_platform_test
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Version String 
        run: |-
          if [[ $VERSION =~  ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version OK: $VERSION"
          else
            echo "Invalid version: $VERSION"
            exit 1
          fi

      - name: Ensure Version Does Not Exist
        run: |-

          URL=https://$(echo $CORE_REPO | sed 's/\//\/v2\//')/$IMAGE_NAME/tags/list
          IDX=$(curl -L $URL | jq ".tags | index(\"$VERSION\")")
          if [ $IDX == "null" ]; then
            echo "OK - Version does not exist: $VERSION"
          else
            echo "Version already exists: $VERSION"
            exit 1
          fi


      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.3
        with:
          service_account_key: ${{ secrets.STEAMPIPE_REGISTRY_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - run: gcloud config list

      - run: gcloud components install beta

      - run: gcloud components install alpha --quiet


      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud beta auth configure-docker us-docker.pkg.dev
        
      - run: oras version   # oras is pre-installed on the image...

      - name: Pull & Extract - darwin amd64
        env:
          OS: darwin
          ARCH: amd64
          TGZ_FILE: postgres-darwin-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR


      - name: Pull & Extract - linux amd64
        env:
          OS: linux
          ARCH: amd64
          TGZ_FILE: postgres-linux-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L  -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR


      - name: Pull & Extract - linux arm64v8
        env:
          OS: linux
          ARCH: arm64v8
          TGZ_FILE: postgres-linux-arm_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L  -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR


      - name: Pull & Extract - windows amd64
        env:
          OS: windows
          ARCH: amd64
          TGZ_FILE: postgres-windows-x86_64.txz #(name of the file once unzipped.  per platform but not same as in the jar name)
        run: |-
          JAR_FILE=${NAME_PREFIX}-${OS}-${ARCH}-${PG_VERSION}.jar
          EXTRACT_DIR=extracted-${OS}-${ARCH}-${PG_VERSION}

          curl -L  -O -J -L ${PATH_BASE}/${NAME_PREFIX}-${OS}-${ARCH}/${PG_VERSION}/${JAR_FILE}
          unzip -o ${JAR_FILE}
          mkdir $EXTRACT_DIR
          tar -xf $TGZ_FILE --directory $EXTRACT_DIR



      # create the config file
      - run: |-
          JSON_STRING=$( jq -n \
            --arg name "$IMAGE_NAME" \
            --arg organization "$ORG" \
            --arg version "$VERSION" \
            --arg schemaVersion "$CONFIG_SCHEMA_VERSION" \
            --arg dbVersion "$PG_VERSION" \
            '{schemaVersion: $schemaVersion, db: { name: $name, organization: $organization, version: $version, dbVersion: $dbVersion} }' )

          echo $JSON_STRING > config.json

      - run: cat config.json

      # create the annotations file
      - run: |-
          JSON_STRING=$( jq -n \
              --arg title "$IMAGE_NAME" \
              --arg desc "$ORG" \
              --arg version "$VERSION" \
              --arg timestamp "$(date +%FT%T%z)" \
              --arg vendor "Turbot HQ, Inc." \
            '{ 
                "$manifest": { 
                    "org.opencontainers.image.title": $title, 
                    "org.opencontainers.image.description": $desc,
                    "org.opencontainers.image.version": $version, 
                    "org.opencontainers.image.created": $timestamp,
                    "org.opencontainers.image.vendor":  $vendor
                }
            }' )

            echo $JSON_STRING > annotations.json

      - run: cat annotations.json 

    # push to the registry
      - run: |-
          REF="$CORE_REPO/$IMAGE_NAME:$GITHUB_RUN_ID"

          oras push $REF \
              --manifest-config config.json:application/vnd.turbot.steampipe.config.v1+json \
              --manifest-annotations annotations.json \
              extracted-darwin-amd64-${PG_VERSION}:application/vnd.turbot.steampipe.db.darwin-amd64.layer.v1+tar \
              extracted-windows-amd64-${PG_VERSION}:application/vnd.turbot.steampipe.db.windows-amd64.layer.v1+tar \
              extracted-linux-amd64-${PG_VERSION}:application/vnd.turbot.steampipe.db.linux-amd64.layer.v1+tar \
              extracted-linux-arm64v8-${PG_VERSION}:application/vnd.turbot.steampipe.db.linux-arm64.layer.v1+tar

      - name: Set version tags
        uses: ./.github/actions/semver-tags 
        id: semver
        with:
          image-to-tag: "${{ env.CORE_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_id  }}"
          image-version: ${{ env.VERSION }}
